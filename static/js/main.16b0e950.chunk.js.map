{"version":3,"sources":["assets/correctWords.txt","engine.js","states/wordsReducer.js","states/sutomProvider.jsx","components/row.jsx","components/winPanel.jsx","components/losePanel.jsx","components/keyboard.jsx","components/grid.jsx","components/home.jsx","components/stats.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","createhintsarray","hints","_step","hintsarray","_iterator","_createForOfIteratorHelper","s","n","done","_step2","hint","value","show","_iterator2","err","e","f","push","min","max","words","wordList","Math","floor","random","generateNewState","choosenWord","length","normalize","replace","toUpperCase","console","log","wordToFind","tries","currentTry","letterPlacement","repeat","wordLength","wellPlacedLetters","Set","misplacedLetters","missingLetters","won","undefined","initialState","wordsReducer","state","action","type","Object","objectSpread","payload","includes","slice","currentHints","word","input","_checkCorrectLetters","split","correct_letters","i","join","checkCorrectLetters","_checkCorrectLetters2","slicedToArray","misplaced_letters","index","indexOf","splice","checkMisplacedLetters","list","joinCorrectAndMisplacedLetters","getHints","add","update_local_storage","length_tried","localStorage","setItem","parseInt","getItem","toFixed","SutomContext","createContext","SutomProvider","_ref","children","_useReducer","useReducer","_useReducer2","dispatch","react_default","a","createElement","Provider","Row","id","_useContext","useContext","className","toConsumableArray","fillSpaces","map","l","key","WinPanel","lib","text","react_router_dom","onClick","window","location","reload","to","LosePanel","Keyboard","_useContext2","useEffect","document","getElementsByClassName","onclick","event","target","innerHTML","toLowerCase","click","c","has","Grid","_useState","useState","_useState2","pressed","setPressed","_useState3","_useState4","errorMessage","setErrorMessage","keyDown","Promise","resolve","reject","fetch","correctWords","then","r","res","addEventListener","removeEventListener","winPanel","losePanel","Fragment","concat","Array","fill","_","row_Row","keyboard","Home","set_local_storage","Stats","get_local_storage","App","sutomProvider","href","style","textDecoration","react_router","path","element","home_Home","grid_Grid","stats_Stats","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"gpJAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,01CCkFjC,SAASC,EAAiBC,GAC7B,IADoCC,EAChCC,EAAa,GADmBC,EAAAC,EAEjBJ,GAFiB,IAEpC,IAAAG,EAAAE,MAAAJ,EAAAE,EAAAG,KAAAC,MAA0B,KAAAC,EAAfC,EAAeR,EAAAS,MAClBC,EAAO,GADWC,EAAAR,EAEFK,GAFE,IAEtB,IAAAG,EAAAP,MAAAG,EAAAI,EAAAN,KAAAC,MAA0B,KAAfG,EAAeF,EAAAE,MAElBC,GADU,gBAAVD,EACQ,eACS,cAAVA,EACC,eAEA,UARM,MAAAG,GAAAD,EAAAE,EAAAD,GAAA,QAAAD,EAAAG,IAWtBb,EAAWc,KAAKL,IAbgB,MAAAE,GAAAV,EAAAW,EAAAD,GAAA,QAAAV,EAAAY,IAepC,OAAOb,EC9FJ,IAUYe,EAAKC,EAFpBC,EAAQC,GAEOH,EAHQ,EAGHC,EAHM,GAInBG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,IAAQA,IAGrD,IAAMO,EAAmB,WACrB,IAAIC,EAAcN,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMO,SACpDC,UAAU,OACVC,QAAQ,mBAAoB,IAC5BC,cAEL,OADAC,QAAQC,IAAIN,GACL,CACHO,WAAYP,EACZQ,MAAO,GACPjC,MAAO,GACPkC,WAAY,GACZC,gBAAiBV,EAAY,GAAK,IAAIW,OAAOX,EAAYC,OAAS,GAClEW,WAAYZ,EAAYC,OACxBY,kBAAmB,IAAIC,IAAI,CAACd,EAAY,KACxCe,iBAAkB,IAAID,IAAI,IAC1BE,eAAgB,IAAIF,IAAI,IACxBG,SAAKC,IAIAC,EAAepB,IAEfqB,EAAe,SAACC,EAAOC,GAChC,OAAQA,EAAOC,MACX,IApCa,QAqCT,OAAOxB,IACX,IAxCwB,mBAyCpB,OAAOyB,OAAAC,EAAA,EAAAD,CAAA,GACAH,EADP,CAEId,WAAYe,EAAOI,UAE3B,IA5CY,OAuDR,MAnDK,6BAyCQC,SAASL,EAAOI,UAAYL,EAAMZ,WAAWR,OAASoB,EAAMT,WACrC,IAA5BS,EAAMZ,WAAWR,QAAgBqB,EAAOI,QAAQtB,gBAAkBiB,EAAMd,WAAW,IACnFc,EAAMZ,YAAcY,EAAMd,WAAW,GACrCc,EAAMZ,YAAca,EAAOI,QAAQtB,eAEnCiB,EAAMZ,YAAca,EAAOI,QAAQtB,cAEb,cAAnBkB,EAAOI,SAA2BL,EAAMZ,WAAWR,OAAS,IACnEoB,EAAMZ,WAAaY,EAAMZ,WAAWmB,MAAM,GAAI,IAE3CJ,OAAAC,EAAA,EAAAD,CAAA,GACAH,GAGX,IAzDe,UA0DXA,EAAMb,MAAMjB,KAAK8B,EAAMZ,YAEvB,IADA,IAAIoB,ED/DT,SAAkBC,EAAMC,GAAO,IAAAC,EAUtC,SAA6BF,EAAMC,GAC/BD,EAAOA,EAAKG,MAAM,IAClBF,EAAQA,EAAME,MAAM,IAEpB,IADA,IAAIC,EAAkB,GACbC,EAAI,EAAGA,EAAIL,EAAK7B,OAAQkC,IACzBJ,EAAMI,KAAOL,EAAKK,IAClBD,EAAgB3C,MAAK,GACrBuC,EAAKK,GAAK,KAEVD,EAAgB3C,MAAK,GAG7B,MAAO,CAAC2C,EAAiBJ,EAAKM,QArBQC,CAAoBP,EAAMC,GAD9BO,EAAAd,OAAAe,EAAA,EAAAf,CAAAQ,EAAA,GAC7BE,EAD6BI,EAAA,GAE9BE,EAuBR,SAA+BV,EAAMC,GACjCD,EAAOA,EAAKG,MAAM,IAClBF,EAAQA,EAAME,MAAM,IAEpB,IADA,IAAIO,EAAoB,GACfL,EAAI,EAAGA,EAAIL,EAAK7B,OAAQkC,IAC7B,GAAIL,EAAKH,SAASI,EAAMI,IAAK,CACzBK,EAAkBjD,MAAK,GACvB,IAAIkD,EAAQX,EAAKY,QAAQX,EAAMI,IAC/BL,EAAKa,OAAOF,EAAO,QAEnBD,EAAkBjD,MAAK,GAG/B,OAAOiD,EApCiBI,CAFUN,EAAA,GAE0BP,GAC5D,OAsCJ,SACIA,EACAG,EACAM,GAEA,IAAIK,EAAO,GACXd,EAAQA,EAAME,MAAM,IACpB,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAM9B,OAAQkC,KACH,IAAvBD,EAAgBC,GAChBU,EAAKtD,MAAMwC,EAAMI,GAAI,iBACW,IAAzBK,EAAkBL,GACzBU,EAAKtD,MAAMwC,EAAMI,GAAI,cAErBU,EAAKtD,MAAMwC,EAAMI,GAAI,KAG7B,OAAOU,EAtDAC,CACHf,EACAG,EACAM,GCyDuBO,CAAS1B,EAAMd,WAAYc,EAAMZ,YAC3C0B,EAAI,EAAGA,EAAIN,EAAa5B,OAAQkC,IACb,gBAApBN,EAAaM,GACbd,EAAMR,kBAAkBmC,IAAI3B,EAAMZ,WAAW0B,IAClB,cAApBN,EAAaM,GACpBd,EAAMN,iBAAiBiC,IAAI3B,EAAMZ,WAAW0B,IACjB,KAApBN,EAAaM,IACpBd,EAAML,eAAegC,IAAI3B,EAAMZ,WAAW0B,IAGlDd,EAAM9C,MAAMgB,KAAKsC,GACjB,IAAK,IAAIM,EAAI,EAAGA,EAAId,EAAM9C,MAAM8C,EAAM9C,MAAM0B,OAAS,GAAGA,OAAQkC,IACb,gBAA3Cd,EAAM9C,MAAM8C,EAAM9C,MAAM0B,OAAS,GAAGkC,KACpCd,EAAMX,gBAAkBW,EAAMX,gBAAgBuB,MAAM,IACpDZ,EAAMX,gBAAgByB,GAAKd,EAAMd,WAAW4B,GAC5Cd,EAAMX,gBAAkBW,EAAMX,gBAAgB0B,KAAK,KAW3D,OARIf,EAAMZ,aAAeY,EAAMd,YAC3Bc,EAAMJ,KAAM,EACZgC,EAAqB5B,EAAMJ,IAAKI,EAAMb,MAAMP,SACd,IAAvBoB,EAAMb,MAAMP,SACnBoB,EAAMJ,KAAM,EACZgC,EAAqB5B,EAAMJ,IAAKI,EAAMb,MAAMP,SAEhDoB,EAAMZ,WAAa,GACZe,OAAAC,EAAA,EAAAD,CAAA,GACAH,GAEX,QACI,OAAOA,IAInB,SAAS4B,EAAqBhC,EAAKiC,GAC/B7C,QAAQC,IAAIW,IACA,IAARA,IACAkC,aAAaC,QACT,SACAC,SAASF,aAAaG,QAAQ,WAAa,GAE/CH,aAAaC,QAAQ,QAASC,SAASF,aAAaG,QAAQ,UAAY,IAE5EH,aAAaC,QAAQ,QAASC,SAASF,aAAaG,QAAQ,UAAY,GACxEH,aAAaC,QACT,aACAC,SAASF,aAAaG,QAAQ,eAAiBJ,GAEnDC,aAAaC,QACT,WAEIC,SAASF,aAAaG,QAAQ,eAC9BD,SAASF,aAAaG,QAAQ,WAChCC,QAAQ,ICnHX,IAAMC,EAAeC,wBAAc,MAW3BC,EATO,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EACZC,qBAAW1C,EAAcD,GADb4C,EAAAvC,OAAAe,EAAA,EAAAf,CAAAqC,EAAA,GAC/BxC,EAD+B0C,EAAA,GACxBC,EADwBD,EAAA,GAEtC,OACEE,EAAAC,EAAAC,cAACX,EAAaY,SAAd,CAAuBnF,MAAO,CAACoC,EAAO2C,IACnCJ,ICNMS,EAAM,SAAAV,GAAkB,IAAf7B,EAAe6B,EAAf7B,KAAMwC,EAASX,EAATW,GAASC,EACnBC,qBAAWhB,GAApBnC,EAD4BG,OAAAe,EAAA,EAAAf,CAAA+C,EAAA,MAE/BD,GAAMjD,EAAMb,MAAMP,SACpB6B,EACEwC,IAAOjD,EAAMb,MAAMP,OACM,KAArBoB,EAAMZ,WACJY,EAAMX,gBACNW,EAAMZ,WACR,IAAIE,OAAOU,EAAMT,aAIzB,IAAMiB,EAAeR,EAAM9C,MAAM+F,GAAMjD,EAAM9C,MAAM+F,GAAM,CAAC,IAoB1D,OACEL,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACZjD,OAAAkD,EAAA,EAAAlD,CANc,SAACM,GAClB,OAAOA,EAAO,IAAInB,OAAOU,EAAMT,WAAakB,EAAK7B,QAK1C0E,CAAW7C,IAAO8C,IAAI,SAACC,EAAG1C,GAC7B,OACE8B,EAAAC,EAAAC,cAAA,OAAKM,UAAW,QAAU5C,EAAaM,GAAI2C,IAAK3C,GAC7C0C,qBCXEE,EAvBE,WAAM,IAAAR,EACLC,qBAAWhB,GACvB/E,EAAaH,EAFIkD,OAAAe,EAAA,EAAAf,CAAA+C,EAAA,MAEmBhG,OACxC,OACE0F,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,kBAAd,mBACAR,EAAAC,EAAAC,cAACa,EAAA,gBAAD,CAAiBC,KAAMxG,EAAW2D,KAAK,OACnC6B,EAAAC,EAAAC,cAAA,UAAQM,UAAU,2BAAlB,iCAEJR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,SACZhG,EAAWmG,IAAI,SAAAvF,GAAC,OAAI4E,EAAAC,EAAAC,cAAA,KAAGM,UAAU,OAAOpF,MAE1C4E,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACET,UAAU,wBACVU,QAAS,kBAAMC,OAAOC,SAASC,UAC/BC,GAAG,SAHL,aCiBSC,EA7BG,WAChBrC,aAAaC,QAAQ,SAAU,GADT,IAAAmB,EAENC,qBAAWhB,GAApBnC,EAFeG,OAAAe,EAAA,EAAAf,CAAA+C,EAAA,MAGlB9F,EAAaH,EAAiB+C,EAAM9C,OACxC,OACE0F,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,kBAAd,8BACAR,EAAAC,EAAAC,cAAA,oCAA4B9C,EAAMd,YAClC0D,EAAAC,EAAAC,cAACa,EAAA,gBAAD,CAAiBC,KAAMxG,EAAW2D,KAAK,OACrC6B,EAAAC,EAAAC,cAAA,UAAQM,UAAU,2BAAlB,iCAIFR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,SACXhG,EAAWmG,IAAI,SAACvF,GAAD,OACd4E,EAAAC,EAAAC,cAAA,KAAGM,UAAU,OAAOpF,MAGxB4E,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACET,UAAU,wBACVU,QAAS,kBAAMC,OAAOC,SAASC,UAC/BC,GAAG,SAHL,aCyBSE,EA5CE,WACf,IADqBlB,EAMKC,qBAAWhB,GANhBkC,EAAAlE,OAAAe,EAAA,EAAAf,CAAA+C,EAAA,GAMdlD,EANcqE,EAAA,GAMP1B,EANO0B,EAAA,GAarB,OANAC,oBAAU,WAER,IADA,IAAIb,EAAMc,SAASC,uBAAuB,OACjC1D,EAAI,EAAGA,EAAI2C,EAAI7E,OAAQkC,IAC9B2C,EAAI3C,GAAG2D,QAAU,SAAUC,GAAS/B,EAAS,CAAEzC,KLXjC,OKW6CG,QAASqE,EAAMC,OAAOC,UAAUC,cAAeC,OAAO,OAInHlC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YAbA,CACf,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAWnBG,IAAI,SAACC,GACb,OACEZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UAAUK,IAAKD,GAC3BA,EAAED,IAAI,SAACwB,GACN,OACEnC,EAAAC,EAAAC,cAAA,UAAQM,UAAU,OAAMR,EAAAC,EAAAC,cAAA,OACtBM,UACEpD,EAAML,eAAeqF,IAAID,GACrB,UACA/E,EAAMN,iBAAiBsF,IAAID,GACzB,qBACA/E,EAAMR,kBAAkBwF,IAAID,GAC1B,cACA,GAEVtB,IAAKsB,GAEJA,WCzBNE,EAAO,WAAM,IAAAC,EACMC,mBAAS,GADfC,EAAAjF,OAAAe,EAAA,EAAAf,CAAA+E,EAAA,GACjBG,EADiBD,EAAA,GACRE,EADQF,EAAA,GAAAlC,EAEEC,qBAAWhB,GAFbkC,EAAAlE,OAAAe,EAAA,EAAAf,CAAA+C,EAAA,GAEjBlD,EAFiBqE,EAAA,GAEV1B,EAFU0B,EAAA,GAAAkB,EAGgBJ,oBAAS,GAHzBK,EAAArF,OAAAe,EAAA,EAAAf,CAAAoF,EAAA,GAGjBE,EAHiBD,EAAA,GAGHE,EAHGF,EAAA,GAKlBG,EAAU,SAACjB,GP6Ca,IAAChE,OO5CXb,IAAdG,EAAMJ,MACR0F,EAAWD,EAAU,GAES,UAA5BX,EAAMjB,IAAIoB,eACV7E,EAAMZ,WAAWR,SAAWoB,EAAMT,YPwCTmB,EOtCRV,EAAMZ,WPuCpB,IAAIwG,QAAQ,SAACC,EAASC,GACzBC,MAAMC,KACDC,KAAK,SAACC,GAAD,OAAOA,EAAEtC,SACdqC,KAAK,SAACrC,GACHiC,EACIjC,EACKhD,MAAM,MACN2C,IAAI,SAAC9C,GAAD,OACDA,EACK5B,UAAU,OACVC,QAAQ,mBAAoB,IAC5BC,gBAERuB,SAASI,EAAM3B,qBOpDGkH,KAAK,SAACE,GACnCA,GACFT,GAAgB,GAChB/C,EAAS,CACPzC,KNtBS,aMyBXwF,GAAgB,KAIpB/C,EAAS,CACPzC,KNhCU,OMiCVG,QAASqE,EAAMjB,IAAIoB,kBAc3B,OARAP,oBAAU,WAGR,OAFAP,OAAOqC,iBAAiB,UAAWT,GAE5B,WACL5B,OAAOsC,oBAAoB,UAAWV,MAItC3F,EAAMJ,IACDgD,EAAAC,EAAAC,cAACwD,EAAD,OACgB,IAAdtG,EAAMJ,IACRgD,EAAAC,EAAAC,cAACyD,EAAD,MAEC3D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2D,SAAA,KACN5D,EAAAC,EAAAC,cAAA,MAAIM,UAAS,SAAAqD,OAAWhB,EAAa,GAAG,SAAxC,mBACA7C,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACZsD,MAAM,GACJC,KAAK,GACLpD,IAAI,SAACqD,EAAG9F,GACP,OACE8B,EAAAC,EAAAC,cAAC+D,EAAD,CACEpG,KACET,EAAMb,MAAM2B,GACRd,EAAMb,MAAM2B,GACZ,IAAIxB,OAAOU,EAAMd,WAAWN,QAElC6E,IAAK3C,EACLmC,GAAInC,OAKd8B,EAAAC,EAAAC,cAACgE,EAAD,QCxEOC,EAAO,WAElB,OAaF,WACyC,OAAnCjF,aAAaG,QAAQ,WACvBH,aAAaC,QAAQ,SAAU,KAEK,OAAlCD,aAAaG,QAAQ,UACvBH,aAAaC,QAAQ,QAAS,KAEM,OAAlCD,aAAaG,QAAQ,UACvBH,aAAaC,QAAQ,QAAS,KAEW,OAAvCD,aAAaG,QAAQ,eACvBH,aAAaC,QAAQ,aAAc,KAEG,OAApCD,aAAaG,QAAQ,YACvBH,aAAaC,QAAQ,UAAW,KA5BlCiF,GAEEpE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACbR,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMT,UAAU,wBAAwBc,GAAG,SAA3C,SAGAtB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMT,UAAU,wBAAwBc,GAAG,UAA3C,kBCRC,IAAM+C,EAAQ,WACnB,OACErE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACbR,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,UAAU8D,EAAkB,WAC/DtE,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,UAAU8D,EAAkB,YACjEtE,EAAAC,EAAAC,cAAA,mCAA0BF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,UAAU8D,EAAkB,YAAtE,aAKN,SAASA,EAAkBzD,GACzB,OAAO3B,aAAaG,QAAQwB,4CCgBf0D,MAjBf,WACE,OACEvE,EAAAC,EAAAC,cAACsE,EAAD,KACExE,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,IAAIC,MAAO,CAAEC,eAAgB,SACnC3E,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OAAf,cAEFR,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACE5E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAOC,KAAK,IAAIC,QAAS9E,EAAAC,EAAAC,cAAC6E,EAAD,QACzB/E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAOC,KAAK,QAAQC,QAAS9E,EAAAC,EAAAC,cAAC8E,EAAD,QAC7BhF,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAOC,KAAK,SAASC,QAAS9E,EAAAC,EAAAC,cAAC+E,EAAD,YCVzBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCjL,EAAAiB,EAAA,GAAAiI,KAAAlJ,EAAAkL,KAAA,UAAqBhC,KAAK,SAAA3D,GAAiD,IAA9C4F,EAA8C5F,EAA9C4F,OAAQC,EAAsC7F,EAAtC6F,OAAQC,EAA8B9F,EAA9B8F,OAAQC,EAAsB/F,EAAtB+F,OAAQC,EAAchG,EAAdgG,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDdQ,IAASC,OACP5F,EAAAC,EAAAC,cAACF,EAAAC,EAAM4F,WAAP,KACE7F,EAAAC,EAAAC,cAAC4F,EAAD,OAEFnE,SAASoE,eAAe,SAM1Bb","file":"static/js/main.16b0e950.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correctWords.d9a72a92.txt\";","import correctWords from \"../src/assets/correctWords.txt\";\n\nexport function getHints(word, input) {\n    let [correct_letters, changed_word] = checkCorrectLetters(word, input);\n    let misplaced_letters = checkMisplacedLetters(changed_word, input);\n    return joinCorrectAndMisplacedLetters(\n        input,\n        correct_letters,\n        misplaced_letters\n    );\n}\n\nfunction checkCorrectLetters(word, input) {\n    word = word.split(\"\");\n    input = input.split(\"\");\n    let correct_letters = [];\n    for (let i = 0; i < word.length; i++) {\n        if (input[i] === word[i]) {\n            correct_letters.push(true);\n            word[i] = \"#\";\n        } else {\n            correct_letters.push(false);\n        }\n    }\n    return [correct_letters, word.join()];\n}\n\nfunction checkMisplacedLetters(word, input) {\n    word = word.split(\"\");\n    input = input.split(\"\");\n    let misplaced_letters = [];\n    for (let i = 0; i < word.length; i++) {\n        if (word.includes(input[i])) {\n            misplaced_letters.push(true);\n            var index = word.indexOf(input[i]);\n            word.splice(index, 1);\n        } else {\n            misplaced_letters.push(false);\n        }\n    }\n    return misplaced_letters;\n}\n\nfunction joinCorrectAndMisplacedLetters(\n    input,\n    correct_letters,\n    misplaced_letters\n) {\n    let list = [];\n    input = input.split(\"\");\n    for (let i = 0; i < input.length; i++) {\n        if (correct_letters[i] === true) {\n            list.push((input[i], \"well-placed\"));\n        } else if (misplaced_letters[i] === true) {\n            list.push((input[i], \"misplaced\"));\n        } else {\n            list.push((input[i], \"\"));\n        }\n    }\n    return list;\n}\n\nexport const checkIfWordExist = (input) => {\n    return new Promise((resolve, reject) => {\n        fetch(correctWords)\n            .then((r) => r.text())\n            .then((text) => {\n                resolve(\n                    text\n                        .split(\"\\n\")\n                        .map((word) =>\n                            word\n                                .normalize(\"NFD\")\n                                .replace(/[\\u0300-\\u036f]/g, \"\")\n                                .toUpperCase()\n                        )\n                        .includes(input.toUpperCase())\n                );\n            });\n    });\n};\n\nexport function createhintsarray(hints) {\n    let hintsarray = [];\n    for (const hint of hints) {\n        let show = \"\"\n        for (const value of hint) {\n            if (value === \"well-placed\") {\n                show += \"🟥\"\n            } else if (value === \"misplaced\") {\n                show += \"🟠\"\n            } else {\n                show += \"⚫\"\n            }\n        }\n        hintsarray.push(show);\n    }\n    return hintsarray;\n}","import wordList from \"../assets/words.json\";\nimport { getHints } from \"../engine.js\";\n\nexport const SET_WORD_TO_FIND = \"SET_WORD_TO_FIND\";\nexport const TYPE = \"TYPE\";\nexport const RESET = \"RESET\";\nexport const CONFIRM = \"CONFIRM\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n\nvar lengthWord = randomNum(5, 10);\nvar words = wordList[lengthWord];\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst generateNewState = () => {\n    var choosenWord = words[Math.floor(Math.random() * words.length)]\n        .normalize(\"NFD\")\n        .replace(/[\\u0300-\\u036f]/g, \"\")\n        .toUpperCase();\n    console.log(choosenWord);\n    return {\n        wordToFind: choosenWord,\n        tries: [],\n        hints: [],\n        currentTry: \"\",\n        letterPlacement: choosenWord[0] + \".\".repeat(choosenWord.length - 1),\n        wordLength: choosenWord.length,\n        wellPlacedLetters: new Set([choosenWord[0]]),\n        misplacedLetters: new Set([]),\n        missingLetters: new Set([]),\n        won: undefined,\n    };\n};\n\nexport const initialState = generateNewState();\n\nexport const wordsReducer = (state, action) => {\n    switch (action.type) {\n        case RESET:\n            return generateNewState();\n        case SET_WORD_TO_FIND:\n            return {\n                ...state,\n                wordToFind: action.payload,\n            };\n        case TYPE:\n            if (ALPHABET.includes(action.payload) && state.currentTry.length < state.wordLength) {\n                if (state.currentTry.length === 0 && action.payload.toUpperCase() !== state.wordToFind[0]) {\n                    state.currentTry += state.wordToFind[0];\n                    state.currentTry += action.payload.toUpperCase();\n                } else {\n                    state.currentTry += action.payload.toUpperCase();\n                }\n            } else if (action.payload === \"backspace\" && state.currentTry.length > 0) {\n                state.currentTry = state.currentTry.slice(0, -1);\n            }\n            return {\n                ...state,\n            };\n\n        case CONFIRM:\n            state.tries.push(state.currentTry);\n            var currentHints = getHints(state.wordToFind, state.currentTry);\n            for (var i = 0; i < currentHints.length; i++) {\n                if (currentHints[i] === \"well-placed\") {\n                    state.wellPlacedLetters.add(state.currentTry[i]);\n                } else if (currentHints[i] === \"misplaced\") {\n                    state.misplacedLetters.add(state.currentTry[i]);\n                } else if (currentHints[i] === \"\") {\n                    state.missingLetters.add(state.currentTry[i]);\n                }\n            }\n            state.hints.push(currentHints);\n            for (let i = 0; i < state.hints[state.hints.length - 1].length; i++) {\n                if (state.hints[state.hints.length - 1][i] === \"well-placed\") {\n                    state.letterPlacement = state.letterPlacement.split(\"\");\n                    state.letterPlacement[i] = state.wordToFind[i];\n                    state.letterPlacement = state.letterPlacement.join(\"\");\n                }\n            }\n            if (state.currentTry === state.wordToFind) {\n                state.won = true;\n                update_local_storage(state.won, state.tries.length);\n            } else if (state.tries.length === 6) {\n                state.won = false;\n                update_local_storage(state.won, state.tries.length);\n            }\n            state.currentTry = \"\";\n            return {\n                ...state,\n            };\n        default:\n            return state;\n    }\n};\n\nfunction update_local_storage(won, length_tried) {\n    console.log(won);\n    if (won === true) {\n        localStorage.setItem(\n            \"streak\",\n            parseInt(localStorage.getItem(\"streak\")) + 1\n        );\n        localStorage.setItem(\"found\", parseInt(localStorage.getItem(\"found\")) + 1);\n    }\n    localStorage.setItem(\"tried\", parseInt(localStorage.getItem(\"tried\")) + 1);\n    localStorage.setItem(\n        \"word_tried\",\n        parseInt(localStorage.getItem(\"word_tried\")) + length_tried\n    );\n    localStorage.setItem(\n        \"average\",\n        (\n            parseInt(localStorage.getItem(\"word_tried\")) /\n            parseInt(localStorage.getItem(\"tried\"))\n        ).toFixed(1)\n    );\n}","import React, { createContext, useReducer } from \"react\";\nimport { wordsReducer, initialState } from \"./wordsReducer\";\n\nexport const SutomContext = createContext(null);\n\nconst SutomProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(wordsReducer, initialState);\n  return (\n    <SutomContext.Provider value={[state, dispatch]}>\n      {children}\n    </SutomContext.Provider>\n  );\n};\n\nexport default SutomProvider;\n","import { SutomContext } from \"../states/sutomProvider\";\nimport React, { useContext } from \"react\";\n\nexport const Row = ({ word, id }) => {\n  const [state] = useContext(SutomContext);\n  if (id >= state.tries.length) {\n    word =\n      id === state.tries.length\n        ? state.currentTry === \"\"\n          ? state.letterPlacement\n          : state.currentTry\n        : \" \".repeat(state.wordLength);\n  }\n\n  // const [hints, setHints] = useState(state.hints[id] ? state.hints[id] : [\"\"]);\n  const currentHints = state.hints[id] ? state.hints[id] : [\"\"];\n\n  // const updateHints = (i = 0) => {\n  //   setTimeout(() => {\n  //     if (id == 0) {\n  //       console.log(currentHints, hints, i);\n  //     }\n  //     if (i < currentHints.length) {\n  //       setHints([...hints, currentHints[i]]);\n  //       updateHints(i + 1);\n  //     }\n  //   }, 500);\n  // };\n\n  // updateHints();\n\n  const fillSpaces = (word) => {\n    return word + \" \".repeat(state.wordLength - word.length);\n  };\n\n  return (\n    <div className=\"row\">\n      {[...fillSpaces(word)].map((l, i) => {\n        return (\n          <div className={\"case \" + currentHints[i]} key={i}>\n            {l}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SutomContext } from \"../states/sutomProvider\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {createhintsarray} from '../engine'\n\nconst WinPanel = () => {\n  const [state] = useContext(SutomContext);\n  let hintsarray = createhintsarray(state.hints);\n  return (\n    <div className=\"panel\">\n      <h1 className=\"end-game-state\">V I C T O I R E</h1>\n      <CopyToClipboard text={hintsarray.join(\"\\n\")}>\n          <button className=\"btn btn-white btn-small\">Copier dans le presse-papier</button>\n        </CopyToClipboard>\n      <h1 className=\"tries\">{\n        hintsarray.map(e => <p className=\"try\">{e}</p>)\n      }</h1>\n      <Link\n        className=\"btn btn-white btn-big\"\n        onClick={() => window.location.reload()}\n        to=\"/game\"\n      >\n        Rejouer\n      </Link>\n    </div>\n  );\n};\n\nexport default WinPanel;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { createhintsarray } from \"../engine\";\n\nconst LosePanel = () => {\n  localStorage.setItem(\"streak\", 0);\n  const [state] = useContext(SutomContext);\n  let hintsarray = createhintsarray(state.hints);\n  return (\n    <div className=\"panel\">\n      <h1 className=\"end-game-state\">G A M E   O V E R</h1>\n      <h3>LE MOT A TROUVER ETAIT {state.wordToFind}</h3>\n      <CopyToClipboard text={hintsarray.join(\"\\n\")}>\n        <button className=\"btn btn-white btn-small\">\n          Copier dans le presse-papier\n        </button>\n      </CopyToClipboard>\n      <h1 className=\"tries\">\n        {hintsarray.map((e) => (\n          <p className=\"try\">{e}</p>\n        ))}\n      </h1>\n      <Link\n        className=\"btn btn-white btn-big\"\n        onClick={() => window.location.reload()}\n        to=\"/game\"\n      >\n        Rejouer\n      </Link>\n    </div>\n  );\n};\n\nexport default LosePanel;\n","import React, { useContext } from \"react\";\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { TYPE } from \"../states/wordsReducer\";\nimport { useEffect } from \"react\";\n\nconst Keyboard = () => {\n  const ALPHABET = [\n    [\"A\", \"Z\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"],\n    [\"Q\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\"],\n    [\"W\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"],\n  ];\n  const [state, dispatch] = useContext(SutomContext);\n  useEffect(() => {\n    let key = document.getElementsByClassName(\"key\")\n    for (var i = 0; i < key.length; i++) {\n      key[i].onclick = function (event) { dispatch({ type: TYPE, payload: event.target.innerHTML.toLowerCase(), click: true }); }\n    }\n  });\n  return (\n    <div className=\"keyboard\">\n      {ALPHABET.map((l) => {\n        return (\n          <div className=\"key-row\" key={l}>\n            {l.map((c) => {\n              return (\n                <button className=\"key\"><div\n                  className={\n                    state.missingLetters.has(c)\n                      ? \"missing\"\n                      : state.misplacedLetters.has(c)\n                        ? \"misplaced-keyboard\"\n                        : state.wellPlacedLetters.has(c)\n                          ? \"well-placed\"\n                          : \"\"\n                  }\n                  key={c}\n                >\n                  {c}\n                </div></button>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n\nexport default Keyboard;\n","import { Row } from \"./row\";\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { TYPE, CONFIRM } from \"../states/wordsReducer\";\n\nimport WinPanel from \"../components/winPanel\";\nimport LosePanel from \"../components/losePanel\";\nimport Keyboard from \"./keyboard\";\n\nimport { checkIfWordExist } from \"../engine\";\n\nexport const Grid = () => {\n  const [pressed, setPressed] = useState(0);\n  const [state, dispatch] = useContext(SutomContext);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const keyDown = (event) => {\n    if (state.won === undefined) {\n      setPressed(pressed + 1);\n      if (\n        event.key.toLowerCase() === \"enter\" &&\n        state.currentTry.length === state.wordLength\n      ) {\n        checkIfWordExist(state.currentTry).then((res) => {\n          if (res) {\n            setErrorMessage(false)\n            dispatch({\n              type: CONFIRM,\n            });\n          } else {\n            setErrorMessage(true)\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE,\n          payload: event.key.toLowerCase(),\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDown);\n    };\n  });\n\n  if (state.won) {\n    return <WinPanel />;\n  } else if (state.won === false) {\n    return <LosePanel />;\n  } else {\n    return (<>\n      <h2 className={`error ${errorMessage?\"\":\"hide\"}`}>MOT NON RECONNU</h2>\n      <div className=\"grid\">\n        {Array(6)\n          .fill(1)\n          .map((_, i) => {\n            return (\n              <Row\n                word={\n                  state.tries[i]\n                    ? state.tries[i]\n                    : \" \".repeat(state.wordToFind.length)\n                }\n                key={i}\n                id={i}\n              />\n            );\n          })}\n      </div>\n      <Keyboard />\n      </>\n    );\n  }\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Home = () => {\n  set_local_storage()\n  return (\n    <div className=\"home\">\n      <Link className=\"btn btn-white btn-big\" to=\"/game\">\n        Jouer\n      </Link>\n      <Link className=\"btn btn-white btn-big\" to=\"/stats\">\n        Statistiques\n      </Link>\n    </div>\n  );\n};\n\n\nfunction set_local_storage() {\n  if (localStorage.getItem(\"streak\") === null){\n    localStorage.setItem(\"streak\", \"0\");\n  }\n  if (localStorage.getItem(\"tried\") === null){\n    localStorage.setItem(\"tried\", \"0\");\n  }\n  if (localStorage.getItem(\"found\") === null){\n    localStorage.setItem(\"found\", \"0\");\n  }\n  if (localStorage.getItem(\"word_tried\") === null){\n    localStorage.setItem(\"word_tried\", \"0\");\n  }\n  if (localStorage.getItem(\"average\") === null){\n    localStorage.setItem(\"average\", \"-\");\n  }\n}","import React from \"react\";\n\nexport const Stats = () => {\n  return (\n    <div className=\"stat\">\n      <h2>MOTS TROUVES : <span className=\"number\">{get_local_storage(\"found\")}</span></h2>\n      <h2>SERIE ACTUELLE : <span className=\"number\">{get_local_storage(\"streak\")}</span></h2>\n      <h2>TENTATIVES MOYENNES : <span className=\"number\">{get_local_storage(\"average\")}</span> ESSAIS</h2>\n    </div>\n  )\n}\n\nfunction get_local_storage(key){\n  return localStorage.getItem(key)\n}","import React from \"react\";\nimport { Grid } from \"./components/grid\";\nimport { Home } from \"./components/home\";\nimport { Stats } from \"./components/stats\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./styles/grid.css\";\nimport \"./styles/home.css\";\nimport \"./styles/stats.css\";\nimport \"./styles/keyboard.css\";\nimport SutomProvider from \"./states/sutomProvider.jsx\";\n\nfunction App() {\n  return (\n    <SutomProvider>\n      <a href=\"/\" style={{ textDecoration: \"none\" }}>\n        <div className=\"nav\">T U S M O</div>\n      </a>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/game\" element={<Grid />} />\n          <Route path=\"/stats\" element={<Stats />} />\n        </Routes>\n      </BrowserRouter>\n    </SutomProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}