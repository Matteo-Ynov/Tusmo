{"ast":null,"code":"import _objectSpread from \"/home/matteo/Desktop/Tusmo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport wordList from \"../assets/words.json\";\nimport { getHints } from \"../engine.js\";\nexport var SET_WORD_TO_FIND = \"SET_WORD_TO_FIND\";\nexport var TYPE = \"TYPE\";\nexport var RESET = \"RESET\";\nexport var CONFIRM = \"CONFIRM\";\nvar ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\nvar lengthWord = randomNum(5, 10);\nvar words = wordList[lengthWord];\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nvar generateNewState = function generateNewState() {\n  var choosenWord = words[Math.floor(Math.random() * words.length)].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toUpperCase();\n  console.log(choosenWord);\n  return {\n    wordToFind: choosenWord,\n    tries: [],\n    hints: [],\n    currentTry: \"\",\n    letterPlacement: choosenWord[0] + \".\".repeat(choosenWord.length - 1),\n    wordLength: choosenWord.length,\n    wellPlacedLetters: new Set([choosenWord[0]]),\n    misplacedLetters: new Set([]),\n    missingLetters: new Set([]),\n    won: undefined\n  };\n};\n\nexport var initialState = generateNewState();\nexport var wordsReducer = function wordsReducer(state, action) {\n  switch (action.type) {\n    case RESET:\n      return generateNewState();\n\n    case SET_WORD_TO_FIND:\n      return _objectSpread({}, state, {\n        wordToFind: action.payload\n      });\n\n    case TYPE:\n      if (ALPHABET.includes(action.payload) && state.currentTry.length < state.wordLength) {\n        if (state.currentTry.length === 0 && action.payload.toUpperCase() !== state.wordToFind[0]) {\n          state.currentTry += state.wordToFind[0];\n          state.currentTry += action.payload.toUpperCase();\n        } else {\n          state.currentTry += action.payload.toUpperCase();\n        }\n      } else if (action.payload === \"backspace\" && state.currentTry.length > 0) {\n        state.currentTry = state.currentTry.slice(0, -1);\n      }\n\n      return _objectSpread({}, state);\n\n    case CONFIRM:\n      state.tries.push(state.currentTry);\n      var currentHints = getHints(state.wordToFind, state.currentTry);\n\n      for (var i = 0; i < currentHints.length; i++) {\n        if (currentHints[i] === \"well-placed\") {\n          state.wellPlacedLetters.add(state.currentTry[i]);\n        } else if (currentHints[i] === \"misplaced\") {\n          state.misplacedLetters.add(state.currentTry[i]);\n        } else if (currentHints[i] === \"\") {\n          state.missingLetters.add(state.currentTry[i]);\n        }\n      }\n\n      state.hints.push(currentHints);\n\n      for (var _i = 0; _i < state.hints[state.hints.length - 1].length; _i++) {\n        if (state.hints[state.hints.length - 1][_i] === \"well-placed\") {\n          state.letterPlacement = state.letterPlacement.split(\"\");\n          state.letterPlacement[_i] = state.wordToFind[_i];\n          state.letterPlacement = state.letterPlacement.join(\"\");\n        }\n      }\n\n      if (state.currentTry === state.wordToFind) {\n        state.won = true;\n        update_local_storage(state.won, state.tries.length);\n      } else if (state.tries.length === 6) {\n        state.won = false;\n        update_local_storage(state.won, state.tries.length);\n      }\n\n      state.currentTry = \"\";\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};\n\nfunction update_local_storage(won, length_tried) {\n  console.log(won);\n\n  if (won === true) {\n    localStorage.setItem(\"streak\", parseInt(localStorage.getItem(\"streak\")) + 1);\n    localStorage.setItem(\"found\", parseInt(localStorage.getItem(\"found\")) + 1);\n  }\n\n  localStorage.setItem(\"tried\", parseInt(localStorage.getItem(\"tried\")) + 1);\n  localStorage.setItem(\"word_tried\", parseInt(localStorage.getItem(\"word_tried\")) + length_tried);\n  localStorage.setItem(\"average\", (parseInt(localStorage.getItem(\"word_tried\")) / parseInt(localStorage.getItem(\"tried\"))).toFixed(1));\n}","map":{"version":3,"sources":["/home/matteo/Desktop/Tusmo/src/states/wordsReducer.js"],"names":["wordList","getHints","SET_WORD_TO_FIND","TYPE","RESET","CONFIRM","ALPHABET","lengthWord","randomNum","words","min","max","Math","floor","random","generateNewState","choosenWord","length","normalize","replace","toUpperCase","console","log","wordToFind","tries","hints","currentTry","letterPlacement","repeat","wordLength","wellPlacedLetters","Set","misplacedLetters","missingLetters","won","undefined","initialState","wordsReducer","state","action","type","payload","includes","slice","push","currentHints","i","add","split","join","update_local_storage","length_tried","localStorage","setItem","parseInt","getItem","toFixed"],"mappings":"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","sourcesContent":["import wordList from \"../assets/words.json\";\nimport { getHints } from \"../engine.js\";\n\nexport const SET_WORD_TO_FIND = \"SET_WORD_TO_FIND\";\nexport const TYPE = \"TYPE\";\nexport const RESET = \"RESET\";\nexport const CONFIRM = \"CONFIRM\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n\nvar lengthWord = randomNum(5, 10);\nvar words = wordList[lengthWord];\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst generateNewState = () => {\n    var choosenWord = words[Math.floor(Math.random() * words.length)]\n        .normalize(\"NFD\")\n        .replace(/[\\u0300-\\u036f]/g, \"\")\n        .toUpperCase();\n    console.log(choosenWord);\n    return {\n        wordToFind: choosenWord,\n        tries: [],\n        hints: [],\n        currentTry: \"\",\n        letterPlacement: choosenWord[0] + \".\".repeat(choosenWord.length - 1),\n        wordLength: choosenWord.length,\n        wellPlacedLetters: new Set([choosenWord[0]]),\n        misplacedLetters: new Set([]),\n        missingLetters: new Set([]),\n        won: undefined,\n    };\n};\n\nexport const initialState = generateNewState();\n\nexport const wordsReducer = (state, action) => {\n    switch (action.type) {\n        case RESET:\n            return generateNewState();\n        case SET_WORD_TO_FIND:\n            return {\n                ...state,\n                wordToFind: action.payload,\n            };\n        case TYPE:\n            if (ALPHABET.includes(action.payload) && state.currentTry.length < state.wordLength) {\n                if (state.currentTry.length === 0 && action.payload.toUpperCase() !== state.wordToFind[0]) {\n                    state.currentTry += state.wordToFind[0];\n                    state.currentTry += action.payload.toUpperCase();\n                } else {\n                    state.currentTry += action.payload.toUpperCase();\n                }\n            } else if (action.payload === \"backspace\" && state.currentTry.length > 0) {\n                state.currentTry = state.currentTry.slice(0, -1);\n            }\n            return {\n                ...state,\n            };\n\n        case CONFIRM:\n            state.tries.push(state.currentTry);\n            var currentHints = getHints(state.wordToFind, state.currentTry);\n            for (var i = 0; i < currentHints.length; i++) {\n                if (currentHints[i] === \"well-placed\") {\n                    state.wellPlacedLetters.add(state.currentTry[i]);\n                } else if (currentHints[i] === \"misplaced\") {\n                    state.misplacedLetters.add(state.currentTry[i]);\n                } else if (currentHints[i] === \"\") {\n                    state.missingLetters.add(state.currentTry[i]);\n                }\n            }\n            state.hints.push(currentHints);\n            for (let i = 0; i < state.hints[state.hints.length - 1].length; i++) {\n                if (state.hints[state.hints.length - 1][i] === \"well-placed\") {\n                    state.letterPlacement = state.letterPlacement.split(\"\");\n                    state.letterPlacement[i] = state.wordToFind[i];\n                    state.letterPlacement = state.letterPlacement.join(\"\");\n                }\n            }\n            if (state.currentTry === state.wordToFind) {\n                state.won = true;\n                update_local_storage(state.won, state.tries.length);\n            } else if (state.tries.length === 6) {\n                state.won = false;\n                update_local_storage(state.won, state.tries.length);\n            }\n            state.currentTry = \"\";\n            return {\n                ...state,\n            };\n        default:\n            return state;\n    }\n};\n\nfunction update_local_storage(won, length_tried) {\n    console.log(won);\n    if (won === true) {\n        localStorage.setItem(\n            \"streak\",\n            parseInt(localStorage.getItem(\"streak\")) + 1\n        );\n        localStorage.setItem(\"found\", parseInt(localStorage.getItem(\"found\")) + 1);\n    }\n    localStorage.setItem(\"tried\", parseInt(localStorage.getItem(\"tried\")) + 1);\n    localStorage.setItem(\n        \"word_tried\",\n        parseInt(localStorage.getItem(\"word_tried\")) + length_tried\n    );\n    localStorage.setItem(\n        \"average\",\n        (\n            parseInt(localStorage.getItem(\"word_tried\")) /\n            parseInt(localStorage.getItem(\"tried\"))\n        ).toFixed(1)\n    );\n}"]},"metadata":{},"sourceType":"module"}