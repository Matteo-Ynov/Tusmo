{"ast":null,"code":"import _slicedToArray from \"/home/matteo/Desktop/Tusmo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport correctWords from \"../src/assets/correctWords.txt\";\nexport function getHints(word, input) {\n  var _checkCorrectLetters = checkCorrectLetters(word, input),\n      _checkCorrectLetters2 = _slicedToArray(_checkCorrectLetters, 2),\n      correct_letters = _checkCorrectLetters2[0],\n      changed_word = _checkCorrectLetters2[1];\n\n  var misplaced_letters = checkMisplacedLetters(changed_word, input);\n  return joinCorrectAndMisplacedLetters(input, correct_letters, misplaced_letters);\n}\n\nfunction checkCorrectLetters(word, input) {\n  word = word.split(\"\");\n  input = input.split(\"\");\n  var correct_letters = [];\n\n  for (var i = 0; i < word.length; i++) {\n    if (input[i] === word[i]) {\n      correct_letters.push(true);\n      word[i] = \"#\";\n    } else {\n      correct_letters.push(false);\n    }\n  }\n\n  return [correct_letters, word.join()];\n}\n\nfunction checkMisplacedLetters(word, input) {\n  word = word.split(\"\");\n  input = input.split(\"\");\n  var misplaced_letters = [];\n\n  for (var i = 0; i < word.length; i++) {\n    if (word.includes(input[i])) {\n      misplaced_letters.push(true);\n      var index = word.indexOf(input[i]);\n      word.splice(index, 1);\n    } else {\n      misplaced_letters.push(false);\n    }\n  }\n\n  return misplaced_letters;\n}\n\nfunction joinCorrectAndMisplacedLetters(input, correct_letters, misplaced_letters) {\n  var list = [];\n  input = input.split(\"\");\n\n  for (var i = 0; i < input.length; i++) {\n    if (correct_letters[i] === true) {\n      list.push((input[i], \"well-placed\"));\n    } else if (misplaced_letters[i] === true) {\n      list.push((input[i], \"misplaced\"));\n    } else {\n      list.push((input[i], \"\"));\n    }\n  }\n\n  return list;\n}\n\nexport var checkIfWordExist = function checkIfWordExist(input) {\n  return new Promise(function (resolve, reject) {\n    fetch(correctWords).then(function (r) {\n      return r.text();\n    }).then(function (text) {\n      resolve(text.split(\"\\n\").map(function (word) {\n        return word.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toUpperCase();\n      }).includes(input.toUpperCase()));\n    });\n  });\n};\nexport function createhintsarray(hints) {\n  var hintsarray = [];\n\n  var _iterator = _createForOfIteratorHelper(hints),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var hint = _step.value;\n      var show = \"\";\n\n      var _iterator2 = _createForOfIteratorHelper(hint),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var value = _step2.value;\n\n          if (value === \"well-placed\") {\n            show += \"ðŸŸ¥\";\n          } else if (value === \"misplaced\") {\n            show += \"ðŸŸ \";\n          } else {\n            show += \"âš«\";\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      hintsarray.push(show);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return hintsarray;\n}","map":{"version":3,"sources":["/home/matteo/Desktop/Tusmo/src/engine.js"],"names":["correctWords","getHints","word","input","checkCorrectLetters","correct_letters","changed_word","misplaced_letters","checkMisplacedLetters","joinCorrectAndMisplacedLetters","split","i","length","push","join","includes","index","indexOf","splice","list","checkIfWordExist","Promise","resolve","reject","fetch","then","r","text","map","normalize","replace","toUpperCase","createhintsarray","hints","hintsarray","hint","show","value"],"mappings":"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","sourcesContent":["import correctWords from \"../src/assets/correctWords.txt\";\n\nexport function getHints(word, input) {\n    let [correct_letters, changed_word] = checkCorrectLetters(word, input);\n    let misplaced_letters = checkMisplacedLetters(changed_word, input);\n    return joinCorrectAndMisplacedLetters(\n        input,\n        correct_letters,\n        misplaced_letters\n    );\n}\n\nfunction checkCorrectLetters(word, input) {\n    word = word.split(\"\");\n    input = input.split(\"\");\n    let correct_letters = [];\n    for (let i = 0; i < word.length; i++) {\n        if (input[i] === word[i]) {\n            correct_letters.push(true);\n            word[i] = \"#\";\n        } else {\n            correct_letters.push(false);\n        }\n    }\n    return [correct_letters, word.join()];\n}\n\nfunction checkMisplacedLetters(word, input) {\n    word = word.split(\"\");\n    input = input.split(\"\");\n    let misplaced_letters = [];\n    for (let i = 0; i < word.length; i++) {\n        if (word.includes(input[i])) {\n            misplaced_letters.push(true);\n            var index = word.indexOf(input[i]);\n            word.splice(index, 1);\n        } else {\n            misplaced_letters.push(false);\n        }\n    }\n    return misplaced_letters;\n}\n\nfunction joinCorrectAndMisplacedLetters(\n    input,\n    correct_letters,\n    misplaced_letters\n) {\n    let list = [];\n    input = input.split(\"\");\n    for (let i = 0; i < input.length; i++) {\n        if (correct_letters[i] === true) {\n            list.push((input[i], \"well-placed\"));\n        } else if (misplaced_letters[i] === true) {\n            list.push((input[i], \"misplaced\"));\n        } else {\n            list.push((input[i], \"\"));\n        }\n    }\n    return list;\n}\n\nexport const checkIfWordExist = (input) => {\n    return new Promise((resolve, reject) => {\n        fetch(correctWords)\n            .then((r) => r.text())\n            .then((text) => {\n                resolve(\n                    text\n                        .split(\"\\n\")\n                        .map((word) =>\n                            word\n                                .normalize(\"NFD\")\n                                .replace(/[\\u0300-\\u036f]/g, \"\")\n                                .toUpperCase()\n                        )\n                        .includes(input.toUpperCase())\n                );\n            });\n    });\n};\n\nexport function createhintsarray(hints) {\n    let hintsarray = [];\n    for (const hint of hints) {\n        let show = \"\"\n        for (const value of hint) {\n            if (value === \"well-placed\") {\n                show += \"ðŸŸ¥\"\n            } else if (value === \"misplaced\") {\n                show += \"ðŸŸ \"\n            } else {\n                show += \"âš«\"\n            }\n        }\n        hintsarray.push(show);\n    }\n    return hintsarray;\n}"]},"metadata":{},"sourceType":"module"}