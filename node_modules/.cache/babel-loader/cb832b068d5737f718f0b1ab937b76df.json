{"ast":null,"code":"import _slicedToArray from \"/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/src/components/grid.jsx\";\n\nimport { Row } from \"./row\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { TYPE, CONFIRM } from \"../states/wordsReducer\";\nimport WinPanel from \"../components/winPanel\";\nimport LosePanel from \"../components/losePanel\";\nimport Keyboard from \"./keyboard\";\nimport { checkIfWordExist } from \"../engine\";\nexport var Grid = function Grid() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var _useContext = useContext(SutomContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      state = _useContext2[0],\n      dispatch = _useContext2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var keyDown = function keyDown(event) {\n    if (state.won === undefined) {\n      setPressed(pressed + 1);\n\n      if (event.key.toLowerCase() === \"enter\" && state.currentTry.length === state.wordLength) {\n        checkIfWordExist(state.currentTry).then(function (res) {\n          if (res) {\n            setErrorMessage(false);\n            dispatch({\n              type: CONFIRM\n            });\n          } else {\n            setErrorMessage(true);\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE,\n          payload: event.key.toLowerCase()\n        });\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"keydown\", keyDown);\n    return function () {\n      window.removeEventListener(\"keydown\", keyDown);\n    };\n  });\n\n  if (state.won) {\n    return /*#__PURE__*/React.createElement(WinPanel, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    });\n  } else if (state.won === false) {\n    return /*#__PURE__*/React.createElement(LosePanel, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"error \".concat(errorMessage ? \"\" : \"hide\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, \"MOT NON RECONNU\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, Array(6).fill(1).map(function (_, i) {\n      return /*#__PURE__*/React.createElement(Row, {\n        word: state.tries[i] ? state.tries[i] : \" \".repeat(state.wordToFind.length),\n        key: i,\n        id: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      });\n    })), /*#__PURE__*/React.createElement(Keyboard, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }));\n  }\n};","map":{"version":3,"sources":["/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/src/components/grid.jsx"],"names":["Row","React","useContext","useEffect","useState","SutomContext","TYPE","CONFIRM","WinPanel","LosePanel","Keyboard","checkIfWordExist","Grid","pressed","setPressed","state","dispatch","errorMessage","setErrorMessage","keyDown","event","won","undefined","key","toLowerCase","currentTry","length","wordLength","then","res","type","payload","window","addEventListener","removeEventListener","Array","fill","map","_","i","tries","repeat","wordToFind"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,wBAA9B;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACMR,QAAQ,CAAC,CAAD,CADd;AAAA;AAAA,MACjBS,OADiB;AAAA,MACRC,UADQ;;AAAA,oBAEEZ,UAAU,CAACG,YAAD,CAFZ;AAAA;AAAA,MAEjBU,KAFiB;AAAA,MAEVC,QAFU;;AAAA,mBAGgBZ,QAAQ,CAAC,KAAD,CAHxB;AAAA;AAAA,MAGjBa,YAHiB;AAAA,MAGHC,eAHG;;AAKxB,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,QAAIL,KAAK,CAACM,GAAN,KAAcC,SAAlB,EAA6B;AAC3BR,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;;AACA,UACEO,KAAK,CAACG,GAAN,CAAUC,WAAV,OAA4B,OAA5B,IACAT,KAAK,CAACU,UAAN,CAAiBC,MAAjB,KAA4BX,KAAK,CAACY,UAFpC,EAGE;AACAhB,QAAAA,gBAAgB,CAACI,KAAK,CAACU,UAAP,CAAhB,CAAmCG,IAAnC,CAAwC,UAACC,GAAD,EAAS;AAC/C,cAAIA,GAAJ,EAAS;AACPX,YAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,YAAAA,QAAQ,CAAC;AACPc,cAAAA,IAAI,EAAEvB;AADC,aAAD,CAAR;AAGD,WALD,MAKO;AACLW,YAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,SATD;AAUD,OAdD,MAcO;AACLF,QAAAA,QAAQ,CAAC;AACPc,UAAAA,IAAI,EAAExB,IADC;AAEPyB,UAAAA,OAAO,EAAEX,KAAK,CAACG,GAAN,CAAUC,WAAV;AAFF,SAAD,CAAR;AAID;AACF;AACF,GAxBD;;AA0BArB,EAAAA,SAAS,CAAC,YAAM;AACd6B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCd,OAAnC;AAEA,WAAO,YAAM;AACXa,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCf,OAAtC;AACD,KAFD;AAGD,GANQ,CAAT;;AAQA,MAAIJ,KAAK,CAACM,GAAV,EAAe;AACb,wBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO,IAAIN,KAAK,CAACM,GAAN,KAAc,KAAlB,EAAyB;AAC9B,wBAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFM,MAEA;AACL,wBAAQ,uDACN;AAAI,MAAA,SAAS,kBAAWJ,YAAY,GAAC,EAAD,GAAI,MAA3B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADM,eAEN;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkB,KAAK,CAAC,CAAD,CAAL,CACEC,IADF,CACO,CADP,EAEEC,GAFF,CAEM,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACb,0BACE,oBAAC,GAAD;AACE,QAAA,IAAI,EACFxB,KAAK,CAACyB,KAAN,CAAYD,CAAZ,IACIxB,KAAK,CAACyB,KAAN,CAAYD,CAAZ,CADJ,GAEI,IAAIE,MAAJ,CAAW1B,KAAK,CAAC2B,UAAN,CAAiBhB,MAA5B,CAJR;AAME,QAAA,GAAG,EAAEa,CANP;AAOE,QAAA,EAAE,EAAEA,CAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD,KAdF,CADH,CAFM,eAmBN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBM,CAAR;AAsBD;AACF,CAnEM","sourcesContent":["import { Row } from \"./row\";\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { TYPE, CONFIRM } from \"../states/wordsReducer\";\n\nimport WinPanel from \"../components/winPanel\";\nimport LosePanel from \"../components/losePanel\";\nimport Keyboard from \"./keyboard\";\n\nimport { checkIfWordExist } from \"../engine\";\n\nexport const Grid = () => {\n  const [pressed, setPressed] = useState(0);\n  const [state, dispatch] = useContext(SutomContext);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const keyDown = (event) => {\n    if (state.won === undefined) {\n      setPressed(pressed + 1);\n      if (\n        event.key.toLowerCase() === \"enter\" &&\n        state.currentTry.length === state.wordLength\n      ) {\n        checkIfWordExist(state.currentTry).then((res) => {\n          if (res) {\n            setErrorMessage(false)\n            dispatch({\n              type: CONFIRM,\n            });\n          } else {\n            setErrorMessage(true)\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE,\n          payload: event.key.toLowerCase(),\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDown);\n    };\n  });\n\n  if (state.won) {\n    return <WinPanel />;\n  } else if (state.won === false) {\n    return <LosePanel />;\n  } else {\n    return (<>\n      <h2 className={`error ${errorMessage?\"\":\"hide\"}`}>MOT NON RECONNU</h2>\n      <div className=\"grid\">\n        {Array(6)\n          .fill(1)\n          .map((_, i) => {\n            return (\n              <Row\n                word={\n                  state.tries[i]\n                    ? state.tries[i]\n                    : \" \".repeat(state.wordToFind.length)\n                }\n                key={i}\n                id={i}\n              />\n            );\n          })}\n      </div>\n      <Keyboard />\n      </>\n    );\n  }\n};"]},"metadata":{},"sourceType":"module"}