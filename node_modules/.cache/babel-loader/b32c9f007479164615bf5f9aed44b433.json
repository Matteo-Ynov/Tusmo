{"ast":null,"code":"import _toConsumableArray from \"/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/src/components/row.jsx\";\n\nimport { SutomContext } from \"../states/sutomProvider\";\nimport React, { useContext } from \"react\";\nexport var Row = function Row(_ref) {\n  var word = _ref.word,\n      id = _ref.id;\n\n  var _useContext = useContext(SutomContext),\n      _useContext2 = _slicedToArray(_useContext, 1),\n      state = _useContext2[0];\n\n  if (id >= state.tries.length) {\n    word = id === state.tries.length ? state.currentTry === \"\" ? state.letterPlacement : state.currentTry : \" \".repeat(state.wordLength);\n  } // const [hints, setHints] = useState(state.hints[id] ? state.hints[id] : [\"\"]);\n\n\n  var currentHints = state.hints[id] ? state.hints[id] : [\"\"]; // const updateHints = (i = 0) => {\n  //   setTimeout(() => {\n  //     if (id == 0) {\n  //       console.log(currentHints, hints, i);\n  //     }\n  //     if (i < currentHints.length) {\n  //       setHints([...hints, currentHints[i]]);\n  //       updateHints(i + 1);\n  //     }\n  //   }, 500);\n  // };\n  // updateHints();\n\n  var fillSpaces = function fillSpaces(word) {\n    return word + \" \".repeat(state.wordLength - word.length);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, _toConsumableArray(fillSpaces(word)).map(function (l, i) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"case \" + currentHints[i],\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, l);\n  }));\n};","map":{"version":3,"sources":["/home/matteo/Desktop/Tusmo-86d28195ef80054d42428a1d98cad5eb5aae1d41/src/components/row.jsx"],"names":["SutomContext","React","useContext","Row","word","id","state","tries","length","currentTry","letterPlacement","repeat","wordLength","currentHints","hints","fillSpaces","map","l","i"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,yBAA7B;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,OAAkB;AAAA,MAAfC,IAAe,QAAfA,IAAe;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,oBACnBH,UAAU,CAACF,YAAD,CADS;AAAA;AAAA,MAC5BM,KAD4B;;AAEnC,MAAID,EAAE,IAAIC,KAAK,CAACC,KAAN,CAAYC,MAAtB,EAA8B;AAC5BJ,IAAAA,IAAI,GACFC,EAAE,KAAKC,KAAK,CAACC,KAAN,CAAYC,MAAnB,GACIF,KAAK,CAACG,UAAN,KAAqB,EAArB,GACEH,KAAK,CAACI,eADR,GAEEJ,KAAK,CAACG,UAHZ,GAII,IAAIE,MAAJ,CAAWL,KAAK,CAACM,UAAjB,CALN;AAMD,GATkC,CAWnC;;;AACA,MAAMC,YAAY,GAAGP,KAAK,CAACQ,KAAN,CAAYT,EAAZ,IAAkBC,KAAK,CAACQ,KAAN,CAAYT,EAAZ,CAAlB,GAAoC,CAAC,EAAD,CAAzD,CAZmC,CAcnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMU,UAAU,GAAG,SAAbA,UAAa,CAACX,IAAD,EAAU;AAC3B,WAAOA,IAAI,GAAG,IAAIO,MAAJ,CAAWL,KAAK,CAACM,UAAN,GAAmBR,IAAI,CAACI,MAAnC,CAAd;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,mBAAIO,UAAU,CAACX,IAAD,CAAd,EAAsBY,GAAtB,CAA0B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACnC,wBACE;AAAK,MAAA,SAAS,EAAE,UAAUL,YAAY,CAACK,CAAD,CAAtC;AAA2C,MAAA,GAAG,EAAEA,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,CADH,CADF;AAKD,GANA,CADH,CADF;AAWD,CA3CM","sourcesContent":["import { SutomContext } from \"../states/sutomProvider\";\nimport React, { useContext } from \"react\";\n\nexport const Row = ({ word, id }) => {\n  const [state] = useContext(SutomContext);\n  if (id >= state.tries.length) {\n    word =\n      id === state.tries.length\n        ? state.currentTry === \"\"\n          ? state.letterPlacement\n          : state.currentTry\n        : \" \".repeat(state.wordLength);\n  }\n\n  // const [hints, setHints] = useState(state.hints[id] ? state.hints[id] : [\"\"]);\n  const currentHints = state.hints[id] ? state.hints[id] : [\"\"];\n\n  // const updateHints = (i = 0) => {\n  //   setTimeout(() => {\n  //     if (id == 0) {\n  //       console.log(currentHints, hints, i);\n  //     }\n  //     if (i < currentHints.length) {\n  //       setHints([...hints, currentHints[i]]);\n  //       updateHints(i + 1);\n  //     }\n  //   }, 500);\n  // };\n\n  // updateHints();\n\n  const fillSpaces = (word) => {\n    return word + \" \".repeat(state.wordLength - word.length);\n  };\n\n  return (\n    <div className=\"row\">\n      {[...fillSpaces(word)].map((l, i) => {\n        return (\n          <div className={\"case \" + currentHints[i]} key={i}>\n            {l}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}